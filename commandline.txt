MAPPING:
========

***STAR***

# generate a genome index for mapping: [2015-01-12]
$ STAR --runMode genomeGenerate --runThreadN 6 --genomeDir ~/c.brig_starindex/
--genomeFastaFiles ~/c_briggsae.PRJNA10731.WS246.genomic.fa --sjdbGTFfile
~/c_briggsae.PRJNA10731.WS246.annotations.gff3
--sjdbGTFtagExonParentTranscript Parent --sjdbOverhang 99

# map reads using STAR: [2015-01-13]
$ STAR --genomeDir c.brig_starindex --runThreadN 6 --readFilesIn ./AF30-1.fastq.gz --readFilesCommand zcat --outReadsUnmapped Fastx --outFileNamePrefix ./testAF30-1/AF30-1.

# exemplar for command used in autoSTAR.py: [2015-01-19]
STAR --runThreadN 6 --genomeDir ~/c.brig_starindex/ --readFilesIn ~/AF16/catAF16/AF14-1.fastq.gz --readFilesCommand zcat --outReadsUnmapped Fastx --outFileNamePrefix ~/AF16/starAF16/AF14-1.

# run STAR on a folder containing multiple .fastq.gz read files
# where 'AF16/catAF16' is the source folder and '~/AF16/starAF16/' 
# is the destination folder: [2015-01-19]
$ python autoSTAR.py AF16/catAF16 ~/AF16/starAF16/

# pull statistics from stats file generated by STAR ('*.Log.final.out')
# into a tab-delimited file (see script for specific stats included)
# where '~/ED3092/starED3092/statsED3092/' is the source folder
# containing multiple stats files and 'EDmRNA.STAR' is the outfile
# prefix: [2015-01-27]
# N.B.: create a folder above the source folder called STARstats/;
# the tab-delimited outfile will be placed there
$ python statspullSTAR.py ~/ED3092/starED3092/statsED3092/ EDmRNA.STAR

# map small RNA reads with STAR with parameters for small RNA
# as specified by Alex Dobin: [2015-02-09]
# these parameters limit the mismatches allowed based on the
# length of the reads and also turns off splicing 
$ STAR --genomeDir ~/c.brig_starindex/ --runThreadN 6 --readFilesIn ~/smallRNA/allReads/asrAF/AF14-1.fastq.gz --readFilesCommand zcat --outReadsUnmapped Fastx --outFileNamePrefix ~/smallRNA/allReads/AFmap2 --outFilterMismatchNoverLmax 0.05 --outFilterMatchNmin 16 --outFilterScoreMinOverLread 0 --outFilterMatchNminOverLread 0 --alignIntronMax 1

# run STAR with small RNA parameters on a folder containing
# multiple .fastq.gz files of small rna reads
# where 'smallRNA/allReads/asrAF' is the source folder and
# '~/smallRNA/allReads/AFmap2' is the destination folder:
# [2015-02-09]
$ python autoSTARsRNA.py smallRNA/allReads/asrAF ~/smallRNA/allReads/AFmap2


MANIPULATING SAM/BAM FILES:
===========================

***Samtools***

# convert a SAM file into a BAM file
# N.B. this step is necessary if you want to sort an alignment
"view a SAM file (-S) as a BAM file (-b) and save to a file, *.bam"
$ samtools view -bS AF14-1.Aligned.out.sam > AF14-1.Aligned.bam

# sort a BAM file
# N.B. do not use -o option unless stdout is desired
# (i.e. when piping to something that expects stdout input)
"sort bam alignment by name (-n) and save to a file, *.sorted.bam, and record
errors in *.sorting.err"
# [2015-02-23]
$ samtools sort -n AF14-1.Aligned.bam AF14-1.sorted 2>AF14-1.sorting.err


COUNTING:
=========

***HTSeq***

# N.B.: bam files must first be sorted before passing them to HTSeq
# it is also best to use a customized .gff file
# to count reads in a sorted bam file:
$ htseq-count --format=bam --stranded=reverse --mode=intersection-nonempty
--idattr=Parent --type=exon AF20.sorted.bam ~/c_briggsae.WBonly.gff3 >
AF20-2.countWB.test 2>AF20-2.countWB.err  


VARIANT CALLING:
================

**Picard Tools**

# N.B.: in order to do variant calling with GATK, it is necessary to first
# process files using Picard Tools
# before starting the pipeline below, it is also necessary to index the
# reference genome first with samtools and then make a dictionary with Picard
# N.B.: the index and dictionary need to be in the same location as the
# reference genome

# create an index for a reference genome using samtools
$ samtools faidx reference_genome.fa

# create a dictionary of the reference genome with Picard
$ PICARD CreateSequenceDictionary I=reference_genome.fa
O=reference_genome.fa.dict

# first, reorder the reads to match order of contigs:
# input file can be either bam or sam
$ PICARD ReorderSam R=reference_genome.fa I=file.bam O=file.reorder.bam
(to iterate through several files, use:
$ for file in *sorted.bam ; do PICARD ReorderSam I=${file}
O=${file/sorted.bam/reorder.bam} ; done)

# second, group all reads into a single read:
# following command also adds important information for GATK to bam file
# SM denotes the sample name; replicates should be given the same sample name
# so they are treated as one (accomplished by SM=${file/-*/}, this replaces
# whatever is after the dash with nothing, so that AF14-1 becomes AF14)
$ for file in *reorder.bam ; do PICARD AddOrReplaceReadGroups I=${file}
O=${file/reorder.bam/readgroup.bam} LB=briggsae PL=illumina PU=1
SM=${file/-*/} ; done 

# third, sort the bam file:
# SO denotes the sorting order; sort according to the read coordinates
$ PICARD SortSam I= O= SO=coordinate

# fourth, mark duplicates in the alignment:
# M denotes the name of file that metrics for duplicates will be written to
$ for file in *sortcoord.bam ; do PICARD I=${file}
O=$[file/sortcoord.bam/markdup.bam} M=${file/sortcoord.bam/markdup.metrics}
2>${file/sortcoord.bam/markdup.err} ; done


FILE MANIPULATION:
==================

# this example takes a list of significantly differentially expressed genes
# and finds their corresponding positions in a gff:

$ for line in genes.sigint.list ; do gene=`cat $line` ; grep "$gene"
~/*noaltsplicing.gff3 ; done | awk '{print $1 "\t" $4 "\t" $5 "\t" $7 "\t"
$9}' - | sed 's/Parent=Transcript://g' - | less
